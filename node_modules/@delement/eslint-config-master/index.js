import jsdocPlugin from "eslint-plugin-jsdoc";
import stylisticPlugin from "@stylistic/eslint-plugin";
import reactPlugin from "eslint-plugin-react";
import globals from "globals";
import importPlugin from "eslint-plugin-import";
import parser from "@babel/eslint-parser";
import babelImportsAttrPlugin from "@babel/plugin-syntax-import-attributes";
import babelPresetReact from "@babel/preset-react";
import tsParser from "@typescript-eslint/parser";
import tsPlugin from "@typescript-eslint/eslint-plugin";
import exportsPlugin from "eslint-plugin-sort-exports";
import promisePlugin from "eslint-plugin-promise";
import reactHooksPlugin from "eslint-plugin-react-hooks";
import reactRefreshPlugin from "eslint-plugin-react-refresh";
import jsxA11yPlugin from "eslint-plugin-jsx-a11y";
import securityPlugin from "eslint-plugin-security";

const plugins = {
  "react": reactPlugin,
  "react-hooks": reactHooksPlugin,
  "react-refresh": reactRefreshPlugin,
  "@stylistic": stylisticPlugin,
  "jsdoc": jsdocPlugin,
  "import": importPlugin,
  "sort-exports": exportsPlugin,
  "promise": promisePlugin,
  "jsx-a11y": jsxA11yPlugin,
  "security": securityPlugin,
};

const customExportsRules = {
  "sort-exports/sort-exports": [ "error", { sortDir: "asc", ignoreCase: true, sortExportKindFirst: "type" } ]
};

const customReactRules = {
  "react/react-in-jsx-scope": "off",
  "react/no-unescaped-entities": "off",
  "react/jsx-curly-spacing": [ 2, {
    "when": "never",
    "children": true,
    "allowMultiline": false,
  } ],
  "react/no-danger-with-children": "off",
  "react/self-closing-comp": [ "error", {
    "component": true,
    "html": true
  } ],
  "react/jsx-props-no-multi-spaces": "error",
  "react/jsx-equals-spacing": [ "error", "never" ],
  "react/jsx-curly-brace-presence": [ "error", {
    props: "always",
    children: "ignore",
    propElementValues: "always"
  } ],
  "react/boolean-prop-naming": [ "error", {
    "rule": "^is[A-Z]([A-Za-z0-9]?)+",
    "validateNested": false
  } ],
  "react/void-dom-elements-no-children": "error",
  "react/jsx-tag-spacing": [
    "error", {
      afterOpening: "never",
      beforeClosing: "never",
      closingSlash: "never",
      beforeSelfClosing: "always",
    }
  ]
};

const customReactHooksRules = {
  "react-hooks/rules-of-hooks": "error",
  "react-hooks/exhaustive-deps": "warn",
};

const customReactRefreshRules = {
  "react-refresh/only-export-components": [
    "warn",
    { allowConstantExport: true, allowExportNames: [] }
  ],
};

const customJSDocRules = {
  "jsdoc/require-description": 1,
  "jsdoc/require-returns": 1,
  "jsdoc/require-jsdoc": [ 1, {
    publicOnly: true,
    require: {
      ArrowFunctionExpression: true,
      ClassDeclaration: true,
      ClassExpression: true,
      FunctionDeclaration: true,
      MethodDefinition: false,
    },
  } ],
};

const customA11yRules = {
  "jsx-a11y/alt-text": "error",
  "jsx-a11y/anchor-is-valid": "error",
  "jsx-a11y/aria-props": "warn",
  "jsx-a11y/aria-role": "warn",
};

const customImportRules = {
  "import/first": "error",
  "import/order": [
    2, {
      "groups": [
        "external",
        "builtin",
        "internal",
        "sibling",
        "parent",
        "index",
      ],
      "pathGroups": [
        {
          "pattern": "components",
          "group": "internal",
        },
        {
          "pattern": "common",
          "group": "internal",
        },
        {
          "pattern": "routes/ **",
          "group": "internal",
        },
        {
          "pattern": "assets/**",
          "group": "internal",
          "position": "after",
        },
      ],
      "pathGroupsExcludedImportTypes":
        [ "internal" ],
      "alphabetize": {
        "order": "asc",
        "caseInsensitive": true,
      },
    },
  ],
  "import/no-cycle": "error",
  "import/no-unresolved": "off",
  "import/namespace": "off",
  "import/no-named-as-default": "off",
  "import/consistent-type-specifier-style": [ "error", "prefer-top-level" ],
  "import/no-duplicates": "error",
  "import/newline-after-import": [ "error", { "count": 1 } ],
};

const customStylisticRules = {
  "@stylistic/function-call-spacing": [ "error", "never" ],
  "@stylistic/semi": "error",
  "@stylistic/semi-spacing": "error",
  "@stylistic/computed-property-spacing": [ "error", "never" ],
  "@stylistic/arrow-spacing": "error",
  "@stylistic/switch-colon-spacing": "error",
  "@stylistic/jsx-quotes": [ "error", "prefer-double" ],
  "@stylistic/comma-spacing": [ "error", { "before": false, "after": true } ],
  "@stylistic/padded-blocks": [ "error", {
    "classes": "always",
    "switches": "never",
  }, { allowSingleLineBlocks: false } ],
  "@stylistic/indent": [ "error", 2, {
    "ImportDeclaration": 1,
    "ObjectExpression": "first",
    "ArrayExpression": 1,
    "SwitchCase": 1,
    "StaticBlock": { "body": 1 },
    "MemberExpression": 1,
    "FunctionExpression": { "parameters": "first", "body": 1 },
    "FunctionDeclaration": { "parameters": "first", "body": 1 },
    "CallExpression": { "arguments": "first" },
  } ],
  "@stylistic/keyword-spacing": [ "error", { "before": true, "after": true } ],
  "@stylistic/key-spacing": [ "error", { "beforeColon": false, "afterColon": true, "mode": "strict" } ],
  "@stylistic/new-parens": "error",
  "@stylistic/no-multi-spaces": "error",
  "@stylistic/no-whitespace-before-property": "error",
  "@stylistic/rest-spread-spacing": ["error", "never"],
  "@stylistic/template-curly-spacing": [ "error", "never" ],
  "@stylistic/space-infix-ops": "error",
  "@stylistic/arrow-parens": [ "error", "always" ],
  "@stylistic/object-curly-newline": [ "error", {
    "ObjectExpression": {
      "multiline": true,
      "minProperties": 4,
      "consistent": true,
    },
    "ObjectPattern": {
      "multiline": true,
      "minProperties": 4,
      "consistent": true,
    },
    "ImportDeclaration": {
      "multiline": true,
      "minProperties": 4,
      "consistent": true,
    },
    "ExportDeclaration": {
      "multiline": true,
      "minProperties": 4,
      "consistent": true,
    },
  }],
  "@stylistic/object-property-newline": [ "error", {
    "allowAllPropertiesOnSameLine": true,
  }],
  "@stylistic/type-annotation-spacing": [ "error", {
    "before": false,
    "after": true,
    "overrides": {
      "arrow": { "before": true, "after": true }
    }
  } ],
  "@stylistic/brace-style": [ "error", "1tbs", {
    "allowSingleLine": false
  } ],
  "@stylistic/block-spacing": [ "error", "always" ],
};

const customRules = {
  "array-bracket-spacing": [
    2,
    "always",
  ],
  "quotes": [
    "error",
    "double",
    {
      "avoidEscape": true,
      "allowTemplateLiterals": true,
    },
  ],
  "function-call-argument-newline": [
    "error",
    "never",
  ],
  "block-spacing": "error",
  "arrow-spacing": "error",
  "constructor-super": 2,
  "for-direction": 2,
  "getter-return": 2,
  "no-async-promise-executor": "off",
  "no-class-assign": 2,
  "no-compare-neg-zero": 2,
  "no-cond-assign": 2,
  "no-useless-escape": "off",
  "no-const-assign": 2,
  "no-constant-condition": 2,
  "no-control-regex": 2,
  "no-debugger": 2,
  "no-delete-var": 2,
  "no-dupe-args": 2,
  "no-dupe-class-members": 2,
  "no-dupe-else-if": 2,
  "no-dupe-keys": 2,
  "no-duplicate-case": 2,
  "no-empty": 2,
  "no-empty-character-class": 2,
  "no-empty-pattern": 2,
  "no-ex-assign": 2,
  "no-extra-boolean-cast": 0,
  "no-extra-semi": 2,
  "no-fallthrough": 2,
  "no-prototype-builtins": 2,
  "no-func-assign": 2,
  "no-global-assign": 2,
  "no-import-assign": 2,
  "no-inner-declarations": 2,
  "no-invalid-regexp": 2,
  "no-irregular-whitespace": 2,
  "no-misleading-character-class": 2,
  "no-mixed-spaces-and-tabs": 2,
  "no-new-symbol": 2,
  "no-obj-calls": 2,
  "no-octal": 2,
  "no-redeclare": 2,
  "no-regex-spaces": 2,
  "no-self-assign": 2,
  "no-setter-return": 2,
  "no-shadow-restricted-names": 2,
  "no-sparse-arrays": 2,
  "no-this-before-super": 2,
  "no-undef": 2,
  "no-unexpected-multiline": 2,
  "no-unreachable": 2,
  "no-unsafe-finally": 2,
  "no-unsafe-negation": 2,
  "no-unused-labels": 2,
  "no-with": 2,
  "require-yield": 2,
  "use-isnan": 2,
  "valid-typeof": 2,
  "no-restricted-exports": 2,
  "no-restricted-globals": 2,
  "no-restricted-modules": 2,
  "no-script-url": 2,
  "no-multiple-empty-lines": 2,
  "no-console": [
    "error",
    {
      "allow": [
        "warn",
        "error",
        "debug",
        "asset",
        "table",
        "time",
        "timeEnd",
      ],
    },
  ],
  "no-unused-vars": [ "error", { "args": "none" } ],
  "key-spacing": [
    "error",
    {
      "mode": "strict",
    },
  ],
  "curly": [ "error", "all" ],
  "object-curly-spacing": [
    "error",
    "always",
  ],
  "no-case-declarations": "error",
  "no-extra-boolean-case": 0,
  "no-duplicate-imports": "off",
  "eqeqeq": [ "error", "always" ],
  "lines-between-class-members": "error",
  "space-in-parens": [ "error", "never" ],
  "no-restricted-imports": [ "error", {
    "patterns": [
      {
        regex: "^#(widgets|features|entities)\\/[a-zA-Z0-9_]+\\/(?!index(\\.(js|ts|tsx|jsx))$).+$",
        message: "You can't directly import something from widgets, features or entities without accessing it's API entry point. Please export required objects."
      }
    ]
  } ],
  "comma-dangle": [
    "error",
    {
      "arrays": "always-multiline",
      "objects": "always-multiline",
      "imports": "always-multiline",
      "exports": "always-multiline",
    }
  ],
  "object-curly-newline": [ "error", {
    "ImportDeclaration": {
      "multiline": true,
      "minProperties": 4,
      "consistent": true,
    },
  } ],
};

const getIgnoreFolders = (folders = [
  "node_modules",
  "build",
  "public",
  "assets",
  "dist",
  ".temp",
  ".cache"
]) => {
  const maskName = "%mask%";
  const ignoreMasks = [ `**/${maskName}/`, `/**/${maskName}/*`, `${maskName}/` ];
  return folders
    .map((folder) => ignoreMasks.map(item => item.replace(maskName, folder)))
    .flat();
};

const files = [ "js", "jsx", "mjs", "ts", "tsx" ]
  .map(ex => `**/*.${ex}`);

const settings = {
  "react": {
    "version": "detect",
  },
  "jsdoc": {
    "mode": "closure",
    "ignorePrivate": true,
    "ignoreInternal": true,
    "tagNamePreference": {
      returns: "returns",
      param: "param"
    },
  },
};

const languageOptions = {
  "globals": {
    ...globals.browser,
    ...globals.jest,
    ...globals.builtin,
    ...globals.serviceworker,
    ...globals.webextensions,
    ...globals.node,
    ...globals.nodeBuiltin,
    ...globals.es2021,
  },
  "parser": parser,
  "parserOptions": {
    "requireConfigFile": false,
    "babelOptions": {
      "presets": [ babelPresetReact ],
      "plugins": [
        [ babelImportsAttrPlugin, { deprecatedAssertSyntax: true } ],
      ],
    },
    "ecmaFeatures": {
      ...reactPlugin.configs.recommended.parserOptions.ecmaFeatures,
      "jsx": true,
      "experimentalObjectRestSpread": true,
    },
    "ecmaVersion": "latest",
    "sourceType": "module",
  },
};

const ts = {
  files: [ "**/*.{ts,tsx}" ],
  languageOptions: {
    parser: tsParser,
  },
  plugins: {
    "@typescript-eslint": tsPlugin,
    "import": importPlugin,
  },
  settings: {
    "import/internal-regex": "^~/",
    "import/resolver": {
      node: {
        extensions: [ ".ts", ".tsx", ".mts" ],
      },
      typescript: {
        alwaysTryTypes: true,
      },
    },
  },
  rules: {
    "react/prop-types": 0,
    "@stylistic/member-delimiter-style": [
      "error",
      {
        multiline: { delimiter: "semi", requireLast: true },
        singleline: { delimiter: "semi", requireLast: true }
      }
    ],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "typeAlias",
        "format": [ "PascalCase" ],
        "custom": { "regex": "^T[A-Z]", "match": true }
      },
      {
        "selector": "interface",
        "format": [ "PascalCase" ],
        "custom": { "regex": "^I[A-Z]", "match": true }
      }
    ],
    "@typescript-eslint/ban-ts-comment": [
      "error",
      { "ts-ignore": true }
    ],
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        prefer: "type-imports",
        disallowTypeAnnotations: false,
      }
    ],
    "@stylistic/type-annotation-spacing": [ "error", {
      "before": false,
      "after": true,
      "overrides": {
        "arrow": { "before": true, "after": true }
      }
    } ],
    "@stylistic/block-spacing": ["error", "always"],
    "@stylistic/space-before-blocks": ["error", "always"],
    "@stylistic/keyword-spacing": ["error", {
      "before": true,
      "after": true,
      "overrides": {
        "interface": { "after": true }
      }
    }],
  }
};

const customPromiseRules = {
  "promise/always-return": "error",
  "promise/no-return-in-finally": "error",
  "promise/param-names": "error",
  "promise/catch-or-return": [ "error", {
    "allowThen": true,
    "allowFinally": true,
    "terminationMethod": [ "catch", "finally" ],
  }],
};

export default [
  {
    plugins,
    files,
    languageOptions,
    settings,
    ignores: getIgnoreFolders(),
    rules: {
      ...customRules,
      ...customImportRules,
      ...customExportsRules,
      ...customStylisticRules,
      ...customJSDocRules,
      ...reactPlugin.configs.recommended.rules,
      ...customReactRules,
      ...customReactHooksRules,
      ...customReactRefreshRules,
      ...customPromiseRules,
      ...customA11yRules,
      ...securityPlugin.configs.recommended.rules,
    },
  },
  ts,
];
